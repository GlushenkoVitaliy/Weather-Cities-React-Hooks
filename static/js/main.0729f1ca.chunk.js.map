{"version":3,"sources":["serviseWeatherApi/ServiceWeatherApi.js","components/WeatherToday/WeatherToday.js","components/ChangeCity/ChangeCity.js","components/ErrorMessage/ErrorMessage.js","components/App/App.js","index.js"],"names":["ServiseWeatherApi","url","fetch","res","ok","Error","status","json","city","this","getResource","dataWeather","_transformData","lat","lon","data","name","temperatureDay","main","temp","wind","speed","date","dt","WeatherToday","newCity","onHasError","serviceWeatherApi","ServiceWeatherApi","useState","weatherCity","setWeatherSity","useEffect","getLocationCity","console","log","getDataByCity","navigator","geolocation","getCurrentPosition","position","getDataByCord","coords","latitude","longitude","onError","err","getDataByCordinates","then","catch","getDataByCityName","className","ChangeCity","onChangeCity","newCityName","setNewCityName","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","ErrorMessage","App","setNewCity","error","setError","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"ySACqBA,E,6IAECC,G,uFAEIC,MAAMD,G,WAAlBE,E,QAEGC,G,sBACC,IAAIC,MAAM,0BAAmBJ,GAAnB,qBACEE,EAAIG,S,uBAEbH,EAAII,O,2NAGGC,G,uFACMC,KAAKC,YAAL,4DAAsEF,EAAtE,yD,cAApBG,E,yBACCF,KAAKG,eAAeD,I,0LAGLE,EAAKC,G,uFACDL,KAAKC,YAAL,8DAAwEG,EAAxE,gBAAmFC,EAAnF,yD,cAApBH,E,yBACCF,KAAKG,eAAeD,I,8IAIhBI,GACX,MAAQ,CACNP,KAAMO,EAAKC,KACXC,eAAgBF,EAAKG,KAAKC,KAC1BC,KAAML,EAAKK,KAAKC,MAChBC,KAAMP,EAAKQ,Q,KC6CNC,G,MApEM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAEzBC,EAAoB,IAAIC,EAFkB,EAIVC,mBAAU,IAJA,mBAIzCC,EAJyC,KAI5BC,EAJ4B,KAMhDC,qBAAU,WAAQC,IAAmBC,QAAQC,IAAI,eAAe,IAEhEH,qBAAU,WACQ,OAAZP,IACFW,EAAcX,GACdS,QAAQC,IAAI,iBACT,CAACV,IAQR,IAAMQ,EAAkB,WACtBI,UAAUC,YAAYC,oBAAmB,SAAAC,GAAQ,OAE/CC,EAAcD,EAASE,OAAOC,SAAUH,EAASE,OAAOE,eAKtDC,EAAU,SAACC,GACfpB,EAAWoB,IAGPL,EAAgB,SAACE,EAAUC,GAC/BjB,EACGoB,oBAAoBJ,EAAUC,GAC9BI,MAAK,SAAAjC,GACJgB,EAAehB,MAEhBkC,MAAMJ,IAGLT,EAAgB,SAACX,GACrBE,EACGuB,kBAAkBzB,GAClBuB,MAAK,SAAAjC,GACJgB,EAAehB,MAEhBkC,MAAMJ,IAIHrC,EAAqCsB,EAArCtB,KAAMc,EAA+BQ,EAA/BR,KAAML,EAAyBa,EAAzBb,eAAgBG,EAASU,EAATV,KAEpC,OACE,yBAAK+B,UAAU,iBAEb,yBAAKA,UAAU,QACb,4BAAK3C,IAEP,yBAAK2C,UAAU,QAAf,QAA4B7B,GAC5B,yBAAK6B,UAAU,QAAf,QAA4BlC,GAC5B,yBAAKkC,UAAU,QAAf,QAA4B/B,MChCfgC,G,MAhCA,SAAC,GAAuB,IAApBC,EAAmB,EAAnBA,aAAmB,EAEExB,mBAAU,IAFZ,mBAE9ByB,EAF8B,KAEjBC,EAFiB,KAclC,OACI,yBAAKJ,UAAU,eACX,6CACA,0BAAMA,UAAU,gBACdK,SAVG,SAACC,GACdA,EAAEC,iBACFL,EAAaC,GACbC,EAAe,MASP,2BAAOI,KAAK,OACLR,UAAU,eACVS,SAlBG,SAACH,GACnBF,EAAeE,EAAEI,OAAOC,QAkBTC,YAAY,gBACZD,MAAOR,IACd,4BACIH,UAAU,qBADd,mBCdDa,G,MAXO,WAElB,OACI,yBAAKb,UAAU,iBACX,iEACA,0ECuCGc,G,MAxCH,WAAO,IAAD,EAEkBpC,mBAAS,MAF3B,mBAENJ,EAFM,KAEGyC,EAFH,OAGcrC,oBAAS,GAHvB,mBAGNsC,EAHM,KAGCC,EAHD,KAmBRC,EAAeF,EAAQ,kBAAC,EAAD,MAAmB,KAEhD,OACI,yBAAKhB,UAAU,eACX,wBAAIA,UAAU,UAAd,gBACC,yBAAKA,UAAU,kBACZ,kBAAC,EAAD,CAAa1B,QAASA,EACTC,WAfT,SAACoB,GACbsB,GAAS,MAgBD,kBAAC,EAAD,CAAYf,aAvBD,SAACC,GACpBY,EAAWZ,GACXc,GAAS,MAwBAC,MClCjBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0729f1ca.chunk.js","sourcesContent":["\r\nexport default class ServiseWeatherApi {\r\n\r\n    async getResource(url) {\r\n        \r\n        const res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` + \r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    async getDataByCityName(city) {\r\n        const dataWeather = await this.getResource(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=6aebc52b238b091e301f34ff37af58c0`);\r\n        return this._transformData(dataWeather)\r\n    }\r\n\r\n    async getDataByCordinates(lat, lon) {\r\n        const dataWeather = await this.getResource(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=6aebc52b238b091e301f34ff37af58c0`);\r\n        return this._transformData(dataWeather)\r\n\r\n    }\r\n\r\n    _transformData(data) {\r\n        return ({\r\n          city: data.name,\r\n          temperatureDay: data.main.temp,\r\n          wind: data.wind.speed,\r\n          date: data.dt\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport ServiceWeatherApi from \"../../serviseWeatherApi/ServiceWeatherApi\";\r\n\r\n\r\nimport \"./WeatherToday.css\";\r\n\r\nconst WeatherToday = ({ newCity, onHasError }) => {\r\n  \r\n  const serviceWeatherApi = new ServiceWeatherApi();\r\n  \r\n  const [weatherCity, setWeatherSity] = useState( {} );\r\n\r\n  useEffect(() => { getLocationCity(); console.log('did mount')}, []);\r\n  \r\n  useEffect(() => { \r\n    if (newCity !== null) {\r\n      getDataByCity(newCity); \r\n      console.log('did update') }\r\n      }, [newCity]);\r\n\r\n\r\n  // - разобраться какие зависимости нужны useEffect\r\n  // - еще раз просмотреть видео про useCallback and useMemo\r\n\r\n\r\n\r\n  const getLocationCity = () => {\r\n    navigator.geolocation.getCurrentPosition(position =>\r\n      \r\n      getDataByCord(position.coords.latitude, position.coords.longitude)\r\n    );\r\n    \r\n  }\r\n\r\n  const onError = (err) => {\r\n    onHasError(err)\r\n  }\r\n\r\n  const getDataByCord = (latitude, longitude) => {\r\n    serviceWeatherApi\r\n      .getDataByCordinates(latitude, longitude)\r\n      .then(data => {\r\n        setWeatherSity(data)\r\n      })\r\n      .catch(onError);\r\n  }\r\n\r\n  const getDataByCity = (newCity) => {\r\n    serviceWeatherApi\r\n      .getDataByCityName(newCity)\r\n      .then(data => {\r\n        setWeatherSity(data)\r\n      })\r\n      .catch(onError);\r\n      \r\n  }\r\n\r\n  const { city, date, temperatureDay, wind } = weatherCity;\r\n\r\n  return (\r\n    <div className=\"weather-today\">\r\n        \r\n      <div className=\"city\">\r\n        <h2>{city}</h2>\r\n      </div>\r\n      <div className=\"date\">date {date}</div>\r\n      <div className=\"temp\">temp {temperatureDay}</div>\r\n      <div className=\"wind\">wind {wind}</div>\r\n       \r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default WeatherToday;\r\n","import React, { useState } from 'react';\r\n\r\nimport './ChangeCity.css';\r\n\r\nconst ChangeCity = ( { onChangeCity }) => {\r\n\r\n    const [ newCityName, setNewCityName ] = useState( '' );\r\n\r\n    const onLabelChange = (e) => {\r\n        setNewCityName(e.target.value)\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onChangeCity(newCityName);\r\n        setNewCityName('')\r\n    }\r\n\r\n        return (\r\n            <div className='change-city'>\r\n                <p>Not your City?</p>\r\n                <form className='item-add-form'\r\n                  onSubmit={onSubmit}\r\n                  >\r\n                <input type='text'\r\n                       className='form-control'\r\n                       onChange={onLabelChange}\r\n                       placeholder='Write it here'\r\n                       value={newCityName} />\r\n                <button \r\n                    className='btn btn-secondary'>Change City</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    export default ChangeCity;","import React from 'react';\r\n\r\nimport './ErrorMessage.css';\r\n\r\n const ErrorMessage = () => {\r\n\r\n    return (\r\n        <div className='error-message'>\r\n            <span>We couldn`t determine the city!</span>\r\n            <span>Verify the spelling of the city name.</span>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default ErrorMessage;","import React, { useState } from 'react';\r\n\r\nimport WeaterToday from '../WeatherToday/WeatherToday';\r\nimport ChangeCity from '../ChangeCity/ChangeCity';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n    const [ newCity, setNewCity ] = useState(null);\r\n    const [ error, setError ] = useState(false);\r\n\r\n    const changeCityName = (newCityName) => {\r\n        setNewCity(newCityName);\r\n        setError(false);\r\n           \r\n    }\r\n\r\n    const onError = (err) => {\r\n        setError(true)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null; \r\n\r\n    return (\r\n        <div className='weather-app'>\r\n            <h1 className='header'>Weather City</h1>\r\n             <div className='weather-window'>\r\n                <WeaterToday newCity={newCity}\r\n                             onHasError={onError}\r\n                />\r\n                <ChangeCity onChangeCity={changeCityName}\r\n                />\r\n                    \r\n                {errorMessage}    \r\n\r\n             </div>\r\n                \r\n         </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App/App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}